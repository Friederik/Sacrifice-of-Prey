import { BoardSide, GameDifficult } from "../core/Enums.js";
import { CardData, DifficultData, Effect } from "../core/Interfaces.js";
import Card from "../entities/Card.js";
import Threat from "../entities/Threat.js";
import GameModel from "../GameModel.js";

// ToDo: –°–¥–µ–ª–∞–π –∑–∞–≥—Ä—É–∑–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å —Ñ–∞–π–ª–æ–≤
/**
 * –ö–ª–∞—Å—Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
export default class GameData {
    /** –î–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ */
    private _effects: Map<string, Effect>
    /** –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç */
    private _cards: Map<string, Card>
    /** –î–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–µ–π */
    private _difficults: Map<GameDifficult, DifficultData>
    /** –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ */
    private _config: Object

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö –∑–∞–≥—Ä—É–∑–∫—É
     */
    constructor() {
        this._effects = this.loadEffects()
        this._cards = this.loadCards()
        this._difficults = this.loadDifficults()
        this._config = this.loadConfig()
        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    }

    get effects(): Map<string, Effect> { return Object.freeze(this._effects) }
    get cards(): Map<string, Card> { return Object.freeze(this._cards) }
    get difficults(): Map<GameDifficult, DifficultData> { return Object.freeze(this._difficults) }
    get config(): Object { return Object.freeze(this._config) }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param effectName –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
     * @returns –°—É—â–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞
     */
    getEffect(effectName: string): Effect { 
        let effect = this._effects.get(effectName)
        if (!effect) throw new Error("–¢–∞–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–µ—Ç")
        return effect
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param cardName –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
     * @returns –°—É—â–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã
     */
    getCard(cardName: string): Card {
        let card = this._cards.get(cardName)
        if (!card) throw new Error("–¢–∞–∫–æ–π –∫–∞—Ä—Ç—ã –Ω–µ—Ç")
        return card.clone()
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
     * @param difficultNumber –ù–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è
     * @returns –°—É—â–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è
     */
    getDifficult(difficultNumber: GameDifficult): DifficultData {
        let difficult = this._difficults.get(difficultNumber)
        if (!difficult) throw new Error("–¢–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ—Ç")
        return difficult
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–ª–æ–¥—É
     * @returns –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–ª–æ–¥–∞
     */
    getStartDeck(): Card[] {
        return [
            this.getCard("Dog"),
            this.getCard("Dog"),
            this.getCard("Rabbit"),
            this.getCard("Rabbit"),
            this.getCard("Raven"),
            this.getCard("Totem"),
            this.getCard("Totem"),
            this.getCard("Totem"),
            this.getCard("Totem")
        ]
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
     * @returns –°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
     */
    getStartShop(): Card[] {
        return [
            this.getCard("Rabbit"),
            this.getCard("Dog"),
            this.getCard("Bear"),
            this.getCard("Dear")
        ]
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É —Ç–µ–∫—É—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
     * @param difficultNumber –ù–æ–º–µ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     * @param side –°—Ç–æ—Ä–æ–Ω–∞
     * @returns –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞
     */
    generateCard(difficultNumber: GameDifficult, side: BoardSide) : Card {
        let difficult = this.getDifficult(difficultNumber)
        let cards: string[] = []
        switch(side) {
            case "Player":
                cards = difficult.player
                break
            case "Opponent":
                cards = difficult.enemies
                break
        }
        let randomName = cards[Math.floor(Math.random() * cards.length)]
        return this.getCard(randomName)
    }

    generateThreat(difficultNumber: GameDifficult): Threat {
        return new Threat(this.generateCard(difficultNumber, BoardSide.Opponent))
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
     * @param difficultNumber –ù–æ–º–µ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     * @returns –ù–∞–±–æ—Ä –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
     */
    generateShopCards(difficultNumber: GameDifficult) : Card[] {
        let generatedCards: Card[] = []
        for(let i = 0; i < 2; i++) {
            generatedCards.push(this.generateCard(difficultNumber, BoardSide.Player))
        }
        for(let i = 0; i < 2; i++) {
            generatedCards.push(this.generateCard(difficultNumber + 1, BoardSide.Player))
        }
        return generatedCards
    }

    /**
     * –ü—Ä–æ–≥—Ä—É–∂–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã. –í–ê–ñ–ù–û: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
     * —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ—Ä—è–¥–æ–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞–ª
     * @returns –î–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
     */
    private loadEffects(): Map<string, Effect> {
        let newEffects = new Map<string, Effect>()

        let someEffects: Effect[] = [
            () => { console.log("Just Nothing") },
            (gameModel, cellId: number, side: BoardSide) => {
                let thisCard = gameModel.board.getCard(cellId, side)
                if (thisCard) {
                    for (let i = 0; i < 5; i++) {
                        let card = gameModel.board.getCard(i, side)
                        if (card) {
                            card.increaseAttack(2)
                        }
                    }
                } else {
                    for (let i = 0; i < 5; i++) {
                        let card = gameModel.board.getCard(i, BoardSide.Player)
                        if (card) {
                            card.increaseAttack(2)
                        }
                    }
                }
            },
            (gameModel, cellId: number, side: BoardSide) => {
                let thisCard = gameModel.board.getCard(cellId, side)
                if (thisCard) {
                    for (let i = 0; i < 5; i++) {
                        let card = gameModel.board.getCard(i, side)
                        if (card) {
                            card.increaseAttack(4)
                        }
                    }
                } else {
                    for (let i = 0; i < 5; i++) {
                        let card = gameModel.board.getCard(i, BoardSide.Player)
                        if (card) {
                            card.increaseAttack(4)
                        }
                    }
                }
            },
            (gameModel: GameModel, cellId: number, side: BoardSide) => {
                let thisCard = gameModel.board.getCard(cellId, side)
                if (thisCard) {
                    for (let i = 0; i < 5; i++) {
                        let card = gameModel.board.getCard(i, side)
                        if (card) {
                            card.increaseHealth(2)
                        }
                    }
                } else {
                    for (let i = 0; i < 5; i++) {
                        let card = gameModel.board.getCard(i, BoardSide.Player)
                        if (card) {
                            card.increaseHealth(2)
                        }
                    }
                }
                
            },
            (gameModel: GameModel, cellId: number, side: BoardSide) => {
                let thisCard = gameModel.board.getCard(cellId, side)
                if (thisCard) {
                    for (let i = 0; i < 5; i++) {
                        let card = gameModel.board.getCard(i, side)
                        if (card) {
                            card.increaseHealth(4)
                        }
                    }
                } else {
                    for (let i = 0; i < 5; i++) {
                        let card = gameModel.board.getCard(i, BoardSide.Player)
                        if (card) {
                            card.increaseHealth(4)
                        }
                    }
                }
            },
            (gameModel: GameModel, cellId: number, side: BoardSide) => {
                gameModel.board.removeCard(side ,cellId)
            },
            (gameModel: GameModel, cellId: number, side: BoardSide) => {
                gameModel.hand.addToHand(gameModel.deck.drawCards(2))
            },
            (gameModel: GameModel, cellId: number, side: BoardSide) => {
                gameModel.deck.increaseDrawCount()
            },
            (gameModel: GameModel, cellId: number, side: BoardSide) => {
                let thisCard = gameModel.board.getCard(cellId, side)
                if (thisCard) {
                    thisCard.increaseAttack(thisCard.attack)
                    thisCard.increaseHealth(thisCard.health)
                }
            }
        ]

        let someEffectsNames: string[] = [
            "",
            "üê∫",
            "üê∫üê∫",
            "üçñ",
            "üçñüçñ",
            "üèÉ",
            "üÉè",
            "ü§≤",
            "üíÄ"

        ]

        if (someEffects.length !== someEffectsNames.length) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
        for(let i = 0; i < someEffectsNames.length; i++) {
            newEffects.set(someEffectsNames[i], someEffects[i])
        }

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞...")
        return newEffects
    }

    /**
     * –ü—Ä–æ–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç
     * @returns –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç
     */
    private loadCards(): Map<string, Card> {
        let newCards = new Map<string, Card>()

        if (this._effects.size <= 1) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")

        let someCards = [
            {
                name: "Hunter",
                coverPath: "assets/images/Hunter.webp",
                attack: 4,
                health: 5,
                price: 4,
                description: "–û–Ω –ø–æ—á—Ç–∏ –∫—Ä—É—Ç–æ–π",
                effectSacrificeName: "",
                effectTurnName: ""
            },
            {
                name: "Shaman",
                coverPath: "assets/images/Shaman.webp",
                attack: 7,
                health: 6,
                price: 6,
                description: "–ö—Ä–µ–π–∑–∏ —á–µ–ª",
                effectSacrificeName: "",
                effectTurnName: ""
            },
            {
                name: "Cultist",
                coverPath: "assets/images/Cultist.webp",
                attack: 3,
                health: 12,
                price: 12,
                description: "–û–ù üèÉ",
                effectSacrificeName: "",
                effectTurnName: "üèÉ"
            },
            {
                name: "Fisher",
                coverPath: "assets/images/Fisher.webp",
                attack: 10,
                health: 12,
                price: 8,
                description: "–í—ã—É–¥–∏–ª",
                effectSacrificeName: "",
                effectTurnName: "üçñ"
            },
            {
                name: "High_Shaman",
                coverPath: "assets/images/High_Shaman.webp",
                attack: 12,
                health: 12,
                price: 15,
                description: "–ß–µ–º —Ä–∞–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ",
                effectSacrificeName: "",
                effectTurnName: "üíÄ"
            },
            {
                name: "Dog",
                coverPath: "assets/images/Dog.webp",
                attack: 3,
                health: 2,
                price: 6,
                description: "–û–Ω —á–µ —Ç–æ —Ç–∞–º –∫—Ä—É—Ç–æ–π –≤ –æ–±—â–µ–º",
                effectSacrificeName: "üê∫",
                effectTurnName: ""
            },
            {
                name: "Rabbit",
                coverPath: "assets/images/Rabbit.webp",
                attack: 2,
                health: 2,
                price: 5,
                description: "–ú–∏–∫—Ä–∏–∫",
                effectSacrificeName: "üçñ",
                effectTurnName: ""
            },
            {
                name: "Dear",
                coverPath: "assets/images/Dear.webp",
                attack: 3,
                health: 3,
                price: 15,
                description: "–°–ª–æ–≤ –Ω–µ—Ç - –æ–Ω –∫—Ä—É—Ç–æ–π",
                effectSacrificeName: "ü§≤",
                effectTurnName: ""
            },
            {
                name: "Bear",
                coverPath: "assets/images/Bear.webp",
                attack: 5,
                health: 5,
                price: 20,
                description: "–ù–µ —Å–ø–∏—Ç –¥–∞–∂–µ",
                effectSacrificeName: "üê∫üê∫",
                effectTurnName: "üçñüçñ"
            },
            {
                name: "Goat",
                coverPath: "assets/images/Goat.webp",
                attack: 4,
                health: 4,
                price: 9,
                description: "–°—Ç–æ–∏—Ç –Ω–∞ —Å—Ç–µ–Ω–µ",
                effectSacrificeName: "üçñüçñ",
                effectTurnName: ""
            },
            {
                name: "Raven",
                coverPath: "assets/images/Raven.webp",
                attack: 5,
                health: 2,
                price: 7,
                description: "–ü—Ç–∏—Ü–∞ –ª–µ—Ç—É—á–∞—è",
                effectSacrificeName: "üÉè",
                effectTurnName: ""
            },
            {
                name: "Totem",
                coverPath: "assets/images/Totem.webp",
                attack: 0,
                health: 5,
                price: 3,
                description: "–°—Ç–æ–∏—Ç —á–µ —Ç–æ",
                effectSacrificeName: "",
                effectTurnName: ""
            }
        ]

        for (let i in someCards) {
            let card = new Card(
                {
                    name: someCards[i].name,
                    coverPath: someCards[i].coverPath,
                    attack: someCards[i].attack,
                    health: someCards[i].health,
                    price: someCards[i].price,
                    description: someCards[i].description,
                    effectSacrificeName: someCards[i].effectSacrificeName,
                    effectTurnName: someCards[i].effectTurnName,
                    effectSacrifice: this.getEffect(someCards[i].effectSacrificeName),
                    effectTurn: this.getEffect(someCards[i].effectTurnName)
                }
            )
            newCards.set(card.name, card)
        }

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞...")
        return newCards
    }

    /**
     * –ü—Ä–æ–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–µ–π
     * @returns –î–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–µ–π
     */
    private loadDifficults(): Map<GameDifficult, DifficultData> {
        let newDifficults = new Map<GameDifficult, DifficultData>()

        let someDifficults: DifficultData[] = [
            {
                player: [
                    "Rabbit",
                    "Dog",
                    "Totem"
                ],
                enemies: [
                    "Hunter",
                    "Shaman"
                ]
            },
            {
                player: [
                    "Rabbit",
                    "Dog",
                    "Totem",
                    "Raven"
                ],
                enemies: [  
                    "Hunter",
                    "Shaman",
                    "Cultist"
                ]
            },
            {
                player: [
                    "Rabbit",
                    "Dog",
                    "Totem",
                    "Raven",
                    "Dear",
                    "Goat"
                ],
                enemies: [  
                    "Shaman",
                    "Cultist",
                    "Fisher"
                ]
            },
            {
                player: [
                    "Dog",
                    "Raven",
                    "Dear",
                    "Goat"
                ],
                enemies: [  
                    "Shaman",
                    "Fisher"
                ]
            },
            {
                player: [
                    "Dog",
                    "Goat",
                    "Bear"
                ],
                enemies: [  
                    "Hish_Shaman"
                ]
            }
        ]
        
        for (let i in someDifficults) {
            newDifficults.set(Number(i) + 1, someDifficults[i])
        }

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞...")
        return newDifficults
    }

    private loadConfig(): Object {
        let newConfig = {}

        //

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞...")
        return newConfig
    }
}